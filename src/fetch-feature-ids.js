import {writeFile} from 'node:fs/promises';
import path from 'node:path';

// Shamelessly based on https://github.com/HTTPArchive/wptagent/blob/fc75ef47fdf2eca036de1464dd2647ad61c4ba19/internal/support/FEATURES/update.py

const SOURCES = {
  blink: 'https://raw.githubusercontent.com/chromium/chromium/main/third_party/blink/public/mojom/use_counter/metrics/web_feature.mojom',
  css: 'https://raw.githubusercontent.com/chromium/chromium/main/third_party/blink/public/mojom/use_counter/metrics/css_property_id.mojom',
};
const output = path.join(import.meta.dirname, 'feature-map.js');

const splitRegex = /k(?<feature>\w+)\s*=\s*(?<id>\d+)/g;

async function fetchFeatureMap(url) {
  const featureMap = new Map()

  const response = await fetch(url);
  const text = await response.text();

  const features = [];
  for (const {groups} of text.matchAll(splitRegex)) {
    featureMap.set(groups.id, groups.feature);
    features.push(groups.feature);
  }

  // Look for missing features (e.g. if a comment breaks the regex).
  for (const {groups} of text.matchAll(/k(?<feature>\w+)/g)) {
    if (!features.includes(groups.feature) &&
        // From comment explaining how to mark a feature as obsolete.
        groups.feature !== 'Frobulate' && !groups.feature.startsWith('OBSOLETE_')) {
      console.log('**** split failure?', groups.feature);
    }
  }

  return featureMap;
}

async function run() {
  const featureMap = await fetchFeatureMap(SOURCES.blink);
  const featureStrIter = featureMap.entries().map(([id, feature]) => `  '${id}': '${feature}',\n`);

  const filename = path.basename(import.meta.filename);
  const stringified = `// Automatically generated by ${filename}\n` +
    `export const featureMap = {\n` +
    [...featureStrIter].join('') +
    `};\n`;
  await writeFile(output, stringified);
}

run();
